@use 'sass:color';
@use 'sass:math';
@use 'functions';

@function colorTest($color, $sat) {
  $changed: change-color($color, 
              $saturation: saturation($color) + $sat);
  @return $changed;
}

@function diff($colorSat, $colorLum) {
  @if ($colorSat >= $colorLum and $colorSat < 100) {
    $diff: 100 - $colorSat;
    @return $diff;
  } @else if ($colorLum >= $colorSat and $colorLum < 100) {
    $diff: 100 - $colorSat;
    @return $diff;
  } @else {
    $diff: 0;
    @return $diff;
  }
}

@function color($color, $scale: 0, $colorScale: 3) {

  // get the base color through map
  $baseColor: if(map-has-key($colors, $color, value), 
                  map-get($colors, $color, value), 
                  $color);

  // get scale through map
  $colorScale: if(map-has-key($colors, $color, scale), 
                  map-get($colors, $color, scale), 
                  $colorScale);

  // grab the base color saturattion and luminance as starting point for building other colors
  $baseSaturation: saturation($baseColor);
  $baseLuminance: lightness($baseColor);

  $difference: 1%; // initiate a percentage for none mapped colors

  // if any of the color maps have keys with numbers, that indicates a custom color scheme. this pulls the key value pair and returns the color for the scale value.
  $customColors: map-get($colors, $color);

  $k: -11;
  @while $k < length($customColors) {
    @if ($k == $scale and map-has-key($colors, $color, $k)) {
      $customColors: map-get($colors, $color, $k);
      @return $customColors;
    }
    $k: $k + 1;    
  }

  // take the difference between the greater value and 100 or the differrence from the smallest value and 0.
  @if ($scale == 0 or $scale == '') {

    // if the scale is blank of has a 0, use the baseColor
    @return $baseColor;

  } @else if (($baseSaturation >= $baseLuminance and ($baseSaturation > 50 and $baseSaturation < 100))) {

    // difference between the colors saturation and 100
    $difference: 100% - $baseSaturation;

  } @else if (($baseLuminance >= $baseSaturation and ($baseLuminance > 50 and $baseLuminance < 100))) {

    // difference between the colors luminance and 100
    $difference: 100% - $baseLuminance;

  } 
  @else if (($baseSaturation <= $baseLuminance and ($baseSaturation < 50 and $baseSaturation > 0))) {

    // difference between 0 and the colors saturation
    $difference: $baseSaturation;

  } @else if (($baseLuminance <= $baseSaturation and ($baseLuminance < 50 and $baseLuminance > 0))) {

    // difference between 0 and the colors luminance
    $difference: $baseLuminance;
  }

  // while the scale is pa ositive number
  @if ($scale > 0) {

    // creates an adjustable value for the asymptote growth/decay equation
    $adjustedValue: math.div(stripUnit($difference), math.div($colorScale, 2));

    // sum of consecutive integers based on the scale used to change the base color. basically a whole number version fo the @while below 
    $newSaturation: percentage(calc((abs($scale) + math.div(abs($scale), 3) * (5 + abs($scale))) / 100));

    // asymptote growth/decay equation
    $newLuminance: calc($difference * (2 / abs($adjustedValue)));

    // sum of consecutive non-integers and adjusted with the scale and adjustedscale
    $i: 1;
    @while $i < $scale {
      $newLuminance: $newLuminance + $i + math.div($scale, 10) + calc($difference * (2 / abs($adjustedValue)));
      $i: $i + 1;
    }

    // returns each newly built color requested
    @return color.adjust($baseColor, $saturation: $newSaturation, $lightness: $newLuminance);
    
    // when the scale is a negative number
  } @else if ($scale < 0) {

    // creates an adjustable value for the asymptote growth/decay equation
    $adjustedValue: math.div(stripUnit($difference), math.div($colorScale, 2));

    // Sum of consecutive numbers based on the value used to change the base color
    $newSaturation: percentage(calc((math.div(abs($scale), 1.5) * (5 + abs($scale))) / 100));

    // asymptote growth/decay equation adjusted for closer initial jump from baseColor
    $newLuminance: 1 + calc((math.div($difference, 5) * (1 / abs($adjustedValue))));

    // sum of consecutive non-integers and adjusted with the scale and adjustedscale but from the negative direction
    $i: 0;
    @while $i > $scale {
      $newLuminance: math.div($newLuminance, 1) - $i - math.div($scale, 10) + calc($difference * (1 / abs($adjustedValue)));
      $i: $i - 1;
    }
    
    // converts value to a negative number to decrease luminance
    $newLuminance: - $newLuminance;

    // returns each newly built color requested
    @return color.adjust($baseColor, $saturation: $newSaturation, $lightness: $newLuminance);
  }
}