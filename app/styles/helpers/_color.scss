@use 'sass:color';
@use 'sass:math';
@use 'functions';

@function colorTest($color, $sat) {
  $changed: change-color($color, 
              $saturation: saturation($color) + $sat);
  @return $changed;
}

@function diff($colorSat, $colorLum) {
  @if ($colorSat >= $colorLum and $colorSat < 100) {
    $diff: 100 - $colorSat;
    @return $diff;
  } @else if ($colorLum >= $colorSat and $colorLum < 100) {
    $diff: 100 - $colorSat;
    @return $diff;
  } @else {
    $diff: 0;
    @return $diff;
  }
}

@function colorTest($color, $value) {
  $baseColor: map-get($colors, $color, value);
  @return $baseColor;
}

@function color($color, $scale: 0, $colorScale: 3) {

  $baseColor: if(map-has-key($colors, $color, value), 
                  map-get($colors, $color, value), 
                  $color);

  $colorScale: if(map-has-key($colors, $color, scale), 
                  map-get($colors, $color, scale), 
                  $colorScale);

  $colorSat: saturation($baseColor);
  $colorLum: lightness($baseColor);

  // @debug $colorSat, $colorLum;

  $diff: 1%; // initiate a percentage for none mapped colors

  // take the difference between the greater value and 100. If the differ
  @if ($scale == 0 or $scale == '') {

    @return $baseColor;

  } @else if (($colorSat >= $colorLum and ($colorSat > 50 and $colorSat < 100))) {

    // difference between the colors saturation and 100
    $diff: 100% - $colorSat;

  } @else if (($colorLum >= $colorSat and ($colorLum > 50 and $colorLum < 100))) {

    // difference between the colors luminance and 100
    $diff: 100% - $colorLum;

  } 
  @else if (($colorSat <= $colorLum and ($colorSat < 50 and $colorSat > 0))) {

    $diff: $colorSat;

  } @else if (($colorLum <= $colorSat and ($colorLum < 50 and $colorLum > 0))) {

    $diff: $colorLum;
  }

    @if ($scale > 0) {
        $adjustedValue: math.div(stripUnit($diff), $colorScale);

        // Sum of consecutive numbers based on the scale used to change the base color
        $newSat: percentage(calc((abs($scale) + math.div(abs($scale), 2) * (5 + abs($scale))) / 100));
        /////// The 10 in (10 + abs($scale)), can be adjusted ot alter the curve.

        $newLum: calc($diff * (2 / abs($adjustedValue)));

        $i: 1;
        @while $i < $scale {
          $newLum: $newLum + $i + math.div($scale, 10) + calc($diff * (2 / abs($adjustedValue)));
          $i: $i + 1;
        }

        // @debug 'Sat: ' $newSat;
        // @debug 'Lum: '$newLum;

        @return color.adjust($baseColor, $saturation: $newSat, $lightness: $newLum);
      

      // when value is neg
      } @else if ($scale < 0) {

        $adjustedValue: math.div(stripUnit($diff), $colorScale);

        // Sum of consecutive numbers based on the value used to change the base color
        $newSat: percentage(calc((math.div(abs($scale), 1.5) * (5 + abs($scale))) / 100));

        // $newSat: percentage(calc((abs($scale) + math.div(abs($scale), 2) * (5 + abs($scale))) / 100));


        $newLum: 1 + calc((math.div($diff, 5) * (1 / abs($adjustedValue))));

        $i: 0;
        @while $i > $scale {
          $newLum: math.div($newLum, 1) - $i - math.div($scale, 10) + calc($diff * (1 / abs($adjustedValue)));
          $i: $i - 1;
        }
      
        $newSat: -7 + math.abs($newSat);
        $newLum: 1 - $newLum;

        @debug 'Sat: ' $newSat;
        @debug 'Lum: '$newLum;

        // @return $newSat, $newLum, $diff, $adjustedValue;
        @return color.adjust($baseColor, $saturation: $newSat, $lightness: $newLum);
        
      }
}